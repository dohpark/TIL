// 프로그래머스 거스름돈

function solution(n, money) {
  let dp = new Array(n + 1).fill(0);
  dp[0] = 1;

  for (let coin of money) {
    for (let price = coin; price <= n; price++) {
      dp[price] += dp[price - coin];
      console.log(`dp: ${dp}, price: ${price}, coin: ${coin}`);
    }
  }

  return dp[n] % 1000000007;
}

console.log(solution(5, [1, 2, 5]));

/*
풀이

2 -> [1, 1], [2]
3 -> 2에 해당하는 값들에 +1을 더하는 느낌 [1, 1, 1], [2, 1]
4 -> 2에 해당하는 값들에 +2 또는 3에 해당하는 값들에 +1을 하는 느낌 -> 두개가 중복되는 경향이 있는데 이건 왜냐하면 지금 1이랑 2 따로 생각해서 그럼
그러므로 우선 1원으로 구성한 값들만 나열하고
그 위에 2원씩 더하여 구성을 하는거임
다시 보자면

1 -> [1]
2 -> [1, 1]
3 -> [1, 1. 1]
4 -> [1, 1, 1, 1]
5 -> [1, 1, 1, 1, 1]

이 위에 2원씩 더하면 어떻게 구성이 되는지 볼꺼임

1 -> [1]
2 -> [1, 1], [2] <- 자기 자신값을 갖는 것은 당연하기에 skip
3 -> [1, 1. 1] <- 원래 1로만 표현한 방법, [1, 2]  <- 1원으로만 1을 표현한 방법 [1]에 2를 추가한 것
4 -> [1, 1, 1, 1] <- 원래 1로만 표현한 방법, [1, 1, 2] <- 2를 보면 [1, 1]이 있는데 이에 2를 삽입한 것, [2, 2] <- 2의 두번째 방법에 2를 삽입한 것
5 -> [1, 1, 1, 1, 1] <- 원래 1로만 표현한 방법, [1, 1, 1, 2] <- [1, 1, 1]에 2삽입, [1, 2, 2] <- [1, 2]에 2 삽입

*/
